
import React, { useState } from 'react';
import './App.css';
import jsPDF from 'jspdf';

const graduationDegrees = [
  { name: 'Bachelor of Technology (BTech)', duration: 4 },
  { name: 'Bachelor of Arts (BA)', duration: 3 },
  { name: 'Bachelor of Science (BSc)', duration: 3 },
  { name: 'Bachelor of Commerce (BCom)', duration: 3 }
];

const indianStates = [
  'Andaman and Nicobar Islands',
  'Andhra Pradesh',
  'Arunachal Pradesh',
  // Remaining states...
];

const MultiStepForm = () => {
  const totalSteps = 4;

  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    name: '',
    surname: '',
    mobile: '',
    email: '',
    permanentAddress: '',
    currentAddress: '',
    pincode: '',
    state: '',
    city: '',
    graduation: '',
    year: '',
    image: null,
    tenthPercentage: '',
    interPercentage: '',
    passedOutYear: ''
  });
  const [errors, setErrors] = useState({});
  const [selectedDegree, setSelectedDegree] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const progress = ((step - 1) / (totalSteps - 1)) * 100;

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'image') {
      setFormData(prevState => ({
        ...prevState,
        [name]: files[0]
      }));
      setImagePreview(URL.createObjectURL(files[0]));
    } else {
      setFormData(prevState => ({
        ...prevState,
        [name]: value
      }));
    }
    validateField(name, value);
    if (name === 'graduation') {
      const degree = graduationDegrees.find(degree => degree.name === value);
      setSelectedDegree(degree);
    }
  };

  const validateField = (name, value) => {
    let error = '';
    switch (name) {
      case 'email':
        if (!value.includes('@')) {
          error = 'Email must be valid';
        }
        break;
      default:
        break;
    }
    setErrors(prevErrors => ({
      ...prevErrors,
      [name]: error
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const requiredFields = ['name', 'surname', 'email'];
    const emptyFields = requiredFields.filter(field => !formData[field]);
    if (emptyFields.length > 0) {
      alert(`Please fill in the following fields: ${emptyFields.join(', ')}`);
      return;
    }

    const validationErrors = validateFormData(formData);
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    let storedData = JSON.parse(localStorage.getItem('formData')) || [];
    if (!Array.isArray(storedData)) {
      storedData = [];
    }
    const newData = { ...formData };
    storedData.push(newData);
    localStorage.setItem('formData', JSON.stringify(storedData));

    if (step < totalSteps) {
      setStep(step + 1);
    } else {
      if (window.confirm('Form Submitted Successfully! Do you want to download the PDF?')) {
        downloadPDF();
      } else {
        resetForm();
      }
    }
  };

  const validateFormData = (data) => {
    let errors = {};
    if (!data.email.includes('@')) {
      errors.email = 'Email must be valid';
    }
    return errors;
  };

  const generateYearOptions = (degree) => {
    if (!degree) return [];

    const options = [];
    for (let i = 1; i <= degree.duration; i++) {
      options.push(
        <option key={i} value={`Year ${i}`}>
          {`Year ${i}`}
        </option>
      );
    }
    return options;
  };

  const downloadPDF = () => {
    const doc = new jsPDF();

    doc.setFontSize(12);
    doc.text(`Name: ${formData.name}`, 20, 20);
    doc.text(`Surname: ${formData.surname}`, 20, 30);
    doc.text(`Mobile: ${formData.mobile}`, 20, 40);
    doc.text(`Email: ${formData.email}`, 20, 50);
    doc.text(`Permanent Address: ${formData.permanentAddress}`, 20, 60);
    doc.text(`Current Address: ${formData.currentAddress}`, 20, 70);
    doc.text(`Pincode: ${formData.pincode}`, 20, 80);
    doc.text(`State: ${formData.state}`, 20, 90);
    doc.text(`City: ${formData.city}`, 20, 100);
    doc.text(`10th Percentage: ${formData.tenthPercentage}`, 20, 110);
    doc.text(`Intermediate Percentage: ${formData.interPercentage}`, 20, 120);
    doc.text(`Graduation: ${formData.graduation}`, 20, 130);
    doc.text(`Year: ${formData.year}`, 20, 140);
    doc.text(`Passed Out Year: ${formData.passedOutYear}`, 20, 150);

    doc.save('form-data.pdf');
  };

  const resetForm = () => {
    setFormData({
      name: '',
      surname: '',
      mobile: '',
      email: '',
      permanentAddress: '',
      currentAddress: '',
      pincode: '',
      state: '',
      city: '',
      graduation: '',
      year: '',
      image: null,
      tenthPercentage: '',
      interPercentage: '',
      passedOutYear: ''
    });
    setStep(1);
    setIsSubmitted(false);
  };

  return (
    <div className="multi-step-form">
      <div className="progress">
        <div
          className="progress-bar"
          role="progressbar"
          style={{ width: `${isSubmitted ? 100 : progress}%` }}
          aria-valuenow={isSubmitted ? 100 : progress}
          aria-valuemin="0"
          aria-valuemax="100"
        ></div>
      </div>
      <form onSubmit={handleSubmit}>
        {step === 1 && (
          <div className="form-step">
            <h2>Personal Details</h2>
            <div className="input-group">
              <input type="text" name="name" placeholder="Name" value={formData.name} onChange={handleChange} required />
              {errors.name && <p className="error-message">{errors.name}</p>}
            </div>
            <div className="input-group">
              <input type="text" name="surname" placeholder="Surname" value={formData.surname} onChange={handleChange} required />
            </div>
            <div className="input-group">
              <input type="tel" name="mobile" pattern='[0-9]{10}' placeholder="Mobile" value={formData.mobile} className="input" onChange={handleChange} required />
            </div>
            <div className="input-group">
              <input type="email" name="email" placeholder="Email" value={formData.email} onChange={handleChange} required />
              {errors.email && <p className="error-message">{errors.email}</p>}
            </div>
            <div className="input-group">
            <input type="file" name="image" className='input' accept="image/*" onChange={handleChange} required />
            </div>
            <div className="button-group">
              <button type="submit">Next</button>
            </div>
          </div>
        )}
        {step === 2 && (
          <div className="form-step">
            <h2>Address</h2>
            <div className="input-group">
              <input type="text" name="permanentAddress" placeholder="Permanent Address" value={formData.permanentAddress} onChange={handleChange} required />
            </div>
            <div className="input-group">
              <input type="text" name="currentAddress" placeholder="Current Address" value={formData.currentAddress} onChange={handleChange} required />
            </div>
            <div className="input-group">
              <input type="text" name="pincode" placeholder="Pincode" value={formData.pincode} onChange={handleChange} required />
            </div>
            <div className="input-group">
              <input
                className="input"
                list="states"
                name="state"
                placeholder="State"
                value={formData.state}
                onChange={handleChange}
                required
              />
              <datalist id="states">
                {indianStates.map((state, index) => (
                  <option key={index} value={state} />
                ))}
              </datalist>
            </div>
            <div className="input-group">
              <input type="text" name="city" placeholder="City" value={formData.city} onChange={handleChange} required />
            </div>
            <div className="button-group">
              <button type="button" onClick={() => setStep(step - 1)}>Back</button>
              <button type="submit">Next</button>
            </div>
          </div>
        )}
        {step === 3 && (
          <div className="form-step">
            <h2> Education Details</h2>
            <div className="input-group">
              <input type="number" min="0" max="100" className="input" name="tenthPercentage" placeholder="10th Percentage" value={formData.tenthPercentage} onChange={handleChange} required />
            </div>
            <div className="input-group">
              <input type="number" min="0" max="100" className="input" name="interPercentage" placeholder="Intermediate Percentage" value={formData.interPercentage} onChange={handleChange} required />
            </div>
            <div className="input-group">
              <select
                name="graduation"
                placeholder="Graduation" className="input"
                value={formData.graduation}
                onChange={handleChange}
                required
              >
                <option value="">Select Graduation</option>
                {graduationDegrees.map((degree, index) => (
                  <option key={index} value={degree.name}>
                    {degree.name}
                  </option>
                ))}
              </select>
            </div>
            <div className="input-group">
              <select
                name="year"
                placeholder="Year" className="input"
                value={formData.year}
                onChange={handleChange}
                required
              >
                <option value="">Select Year</option>
                {generateYearOptions(selectedDegree)}
              </select>
            </div>
            <div className="input-group">
              <input type="number" name="passedOutYear" className="input" placeholder="Passed Out Year" value={formData.passedOutYear} onChange={handleChange} required />
            </div>
            <div className="button-group">
              <button type="button" onClick={() => setStep(step - 1)}>Back</button>
              <button type="submit">Next</button>
            </div>
          </div>
        )}
        {step === 4 && (
          <div className="form-step">
            <h2>Step 4: Review</h2>
            <p>Name: {formData.name}</p>
            <p>Surname: {formData.surname}</p>
            <p>Image:
              {imagePreview && <img src={imagePreview} alt="Preview" className="image-preview" />}
            </p>
            <p>Mobile: {formData.mobile}</p>
            <p>Email: {formData.email}</p>
            <p>Permanent Address: {formData.permanentAddress}</p>
            <p>Current Address: {formData.currentAddress}</p>
            <p>Pincode: {formData.pincode}</p>
            <p>State: {formData.state}</p>
            <p>City: {formData.city}</p>
            <p>10th Percentage: {formData.tenthPercentage}</p>
            <p>Intermediate Percentage: {formData.interPercentage}</p>
            <p>Graduation: {formData.graduation}</p>
            <p>Year: {formData.year}</p>
            <p>Passed Out Year: {formData.passedOutYear}</p>
 
            <div className="button-group">
              <button type="button" onClick={() => setStep(3)}>Update</button>
              <button type="button" onClick={resetForm}>Delete</button>
              <button type="submit" className="final-submit">Submit</button>
            </div>
          </div>
        )}
        {isSubmitted && (
          <div className="success-page">
            <h1>Form Submitted Successfully!</h1>
            <p>Thank you for completing the form.</p>
            <button onClick={() => {
              if (window.confirm('Do you want to download the PDF?')) {
                downloadPDF();
              }
            }}>Download PDF</button>
          </div>
        )}
      </form>
    </div>
  );
 };
 
 export default MultiStepForm;